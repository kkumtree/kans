AWSTemplateFormatVersion: '2010-09-09'

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: <<<<< Deploy EC2 >>>>>
        Parameters:
          - KeyName
          - SgIngressSshCidr
          - MyInstanceType
          - LatestAmiId

      - Label:
          default: <<<<< Region AZ >>>>>
        Parameters:
          - TargetRegion
          - AvailabilityZone1
          - AvailabilityZone2

      - Label:
          default: <<<<< VPC Subnet >>>>>
        Parameters:
          - VpcBlock
          - PublicSubnet1Block
          - PublicSubnet2Block

Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances.
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  SgIngressSshCidr:
    Description: The IP address range that can be used to communicate to the EC2 instances.
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  MyInstanceType:
    Description: Enter EC2 Type(Spec) Ex) t2.micro.
    Type: String
    Default: t3.medium
  LatestAmiId:
    Description: (DO NOT CHANGE)
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/canonical/ubuntu/server/22.04/stable/current/amd64/hvm/ebs-gp2/ami-id
    AllowedValues:
      - /aws/service/canonical/ubuntu/server/22.04/stable/current/amd64/hvm/ebs-gp2/ami-id

  TargetRegion:
    Type: String
    Default: ap-northeast-2
  AvailabilityZone1:
    Type: String
    Default: ap-northeast-2a
  AvailabilityZone2:
    Type: String
    Default: ap-northeast-2c

  VpcBlock:
    Type: String
    Default: 192.168.0.0/16
  PublicSubnet1Block:
    Type: String
    Default: 192.168.10.0/24
  PublicSubnet2Block:
    Type: String
    Default: 192.168.20.0/24

Resources:
  # VPC
  KansVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcBlock
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: Kans-VPC

  # PublicSubnets
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Ref AvailabilityZone1
      CidrBlock: !Ref PublicSubnet1Block
      VpcId: !Ref KansVPC
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Kans-PublicSubnet1
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Ref AvailabilityZone2
      CidrBlock: !Ref PublicSubnet2Block
      VpcId: !Ref KansVPC
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Kans-PublicSubnet2

  InternetGateway:
    Type: AWS::EC2::InternetGateway
  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref KansVPC

  PublicSubnetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref KansVPC
      Tags:
        - Key: Name
          Value: Kans-PublicSubnetRouteTable
  PublicSubnetRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicSubnetRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicSubnetRouteTable
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicSubnetRouteTable

  # EC2 Hosts
  EC2SG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Kans EC2 Security Group
      VpcId: !Ref KansVPC
      Tags:
        - Key: Name
          Value: Kans-SG
      SecurityGroupIngress:
        - IpProtocol: '-1'
          CidrIp: !Ref SgIngressSshCidr
        - IpProtocol: '-1'
          CidrIp: !Ref VpcBlock
        - IpProtocol: '-1'
          CidrIp: 172.16.0.0/16
        - IpProtocol: '-1'
          CidrIp: 10.200.1.0/24

  EC21ENI1:
    Type: AWS::EC2::NetworkInterface
    Properties:
      SubnetId: !Ref PublicSubnet1
      Description: !Sub Kans-EC21-ENI1
      GroupSet:
        - !Ref EC2SG
      PrivateIpAddress: 192.168.10.10
      SourceDestCheck: false
      Tags:
        - Key: Name
          Value: !Sub Kans-EC21-ENI1

  EC22ENI1:
    Type: AWS::EC2::NetworkInterface
    Properties:
      SubnetId: !Ref PublicSubnet1
      Description: !Sub Kans-EC22-ENI1
      GroupSet:
        - !Ref EC2SG
      PrivateIpAddress: 192.168.10.101
      SourceDestCheck: false
      Tags:
        - Key: Name
          Value: !Sub Kans-EC22-ENI1

  EC23ENI1:
    Type: AWS::EC2::NetworkInterface
    Properties:
      SubnetId: !Ref PublicSubnet1
      Description: !Sub Kans-EC23-ENI1
      GroupSet:
        - !Ref EC2SG
      PrivateIpAddress: 192.168.10.102
      SourceDestCheck: false
      Tags:
        - Key: Name
          Value: !Sub Kans-EC23-ENI1

  EC24ENI1:
    Type: AWS::EC2::NetworkInterface
    Properties:
      SubnetId: !Ref PublicSubnet2
      Description: !Sub Kans-EC24-ENI1
      GroupSet:
        - !Ref EC2SG
      PrivateIpAddress: 192.168.20.100
      SourceDestCheck: false
      Tags:
        - Key: Name
          Value: !Sub Kans-EC24-ENI1

  EC21:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref MyInstanceType
      ImageId: !Ref LatestAmiId
      KeyName: !Ref KeyName
      Tags:
        - Key: Name
          Value: k8s-m
      NetworkInterfaces:
        - NetworkInterfaceId: !Ref EC21ENI1
          DeviceIndex: '0'
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeType: gp3
            VolumeSize: 30
            DeleteOnTermination: true
      UserData: !Base64
        Fn::Sub: |
          #!/bin/bash
          hostnamectl --static set-hostname k8s-m
          # Config convenience
          echo 'alias vi=vim' >> /etc/profile
          ln -sf /usr/share/zoneinfo/Asia/Seoul /etc/localtime
          # Disable ufw & AppArmor
          systemctl stop ufw && systemctl disable ufw
          systemctl stop apparmor && systemctl disable apparmor
          #  ubuntu user -> root user
          echo "sudo su -" >> /home/ubuntu/.bashrc
          # Setting Local DNS Using Hosts file
          echo "192.168.10.10 k8s-m" >> /etc/hosts
          echo "192.168.10.101 k8s-w1" >> /etc/hosts
          echo "192.168.10.102 k8s-w2" >> /etc/hosts
          echo "192.168.20.100 k8s-w0" >> /etc/hosts
          # add kubernetes repo
          curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.30/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
          echo "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.30/deb/ /" | sudo tee /etc/apt/sources.list.d/kubernetes.list
          # add docker-ce repo with containerd
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
          # packets traversing the bridge are processed by iptables for filtering
          echo 1 > /proc/sys/net/ipv4/ip_forward
          # enable br_filter for iptables
          modprobe br_netfilter
          # Update the apt package index, install kubelet, kubeadm and kubectl, and pin their version
          apt update && apt-get install -y kubelet kubectl kubeadm containerd.io && apt-mark hold kubelet kubeadm kubectl
          # containerd configure to default and cgroup managed by systemd
          containerd config default > /etc/containerd/config.toml
          sed -i 's/SystemdCgroup = false/SystemdCgroup = true/g' /etc/containerd/config.toml
          # avoid WARN&ERRO(default endpoints) when crictl run
          cat <<EOF > /etc/crictl.yaml
          runtime-endpoint: unix:///run/containerd/containerd.sock
          image-endpoint: unix:///run/containerd/containerd.sock
          EOF
          # ready to install for k8s
          systemctl restart containerd && systemctl enable containerd
          systemctl enable --now kubelet
          # init kubernetes (w/ containerd)
          kubeadm init --token 123456.1234567890123456 --token-ttl 0 --pod-network-cidr=172.16.0.0/16 --apiserver-advertise-address=192.168.10.10 --service-cidr 10.200.1.0/24 --cri-socket=unix:///run/containerd/containerd.sock
          # Install packages
          apt install tree jq bridge-utils net-tools conntrack ipset wireguard -y
          # Install Helm
          curl -s https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash
          # config for master node only
          mkdir -p /root/.kube
          cp -i /etc/kubernetes/admin.conf /root/.kube/config
          #chown $(id -u):$(id -g) /root/.kube/config
          # kubectl completion on bash-completion dir
          kubectl completion bash > /etc/bash_completion.d/kubectl
          # alias kubectl to k
          echo 'alias k=kubectl' >> /etc/profile
          echo 'complete -F __start_kubectl k' >> /etc/profile
          # Install Kubectx & Kubens"
          git clone https://github.com/ahmetb/kubectx /opt/kubectx
          ln -s /opt/kubectx/kubens /usr/local/bin/kubens
          ln -s /opt/kubectx/kubectx /usr/local/bin/kubectx
          # Install Kubeps
          git clone https://github.com/jonmosco/kube-ps1.git /root/kube-ps1
          cat <<"EOT" >> /root/.bash_profile
          source /root/kube-ps1/kube-ps1.sh
          function get_cluster_short() {
            echo "$1" | cut -d . -f1
          }
          KUBE_PS1_CLUSTER_FUNCTION=get_cluster_short
          KUBE_PS1_SUFFIX=') '
          PS1='$(kube_ps1)'$PS1
          EOT
          kubectl config rename-context "kubernetes-admin@kubernetes" "HomeLab"

  EC22:
    Type: AWS::EC2::Instance
    DependsOn: EC21
    Properties:
      InstanceType: !Ref MyInstanceType
      ImageId: !Ref LatestAmiId
      KeyName: !Ref KeyName
      Tags:
        - Key: Name
          Value: k8s-w1
      NetworkInterfaces:
        - NetworkInterfaceId: !Ref EC22ENI1
          DeviceIndex: '0'
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeType: gp3
            VolumeSize: 30
            DeleteOnTermination: true
      UserData: !Base64
        Fn::Sub: |
          #!/bin/bash
          hostnamectl --static set-hostname k8s-w1
          # Config convenience
          echo 'alias vi=vim' >> /etc/profile
          ln -sf /usr/share/zoneinfo/Asia/Seoul /etc/localtime
          # Disable ufw & AppArmor
          systemctl stop ufw && systemctl disable ufw
          systemctl stop apparmor && systemctl disable apparmor
          #  ubuntu user -> root user
          echo "sudo su -" >> /home/ubuntu/.bashrc
          # Setting Local DNS Using Hosts file
          echo "192.168.10.10 k8s-m" >> /etc/hosts
          echo "192.168.10.101 k8s-w1" >> /etc/hosts
          echo "192.168.10.102 k8s-w2" >> /etc/hosts
          echo "192.168.20.100 k8s-w0" >> /etc/hosts
          # add kubernetes repo
          curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.30/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
          echo "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.30/deb/ /" | sudo tee /etc/apt/sources.list.d/kubernetes.list
          # add docker-ce repo with containerd
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
          # packets traversing the bridge are processed by iptables for filtering
          echo 1 > /proc/sys/net/ipv4/ip_forward
          # enable br_filter for iptables
          modprobe br_netfilter
          # Update the apt package index, install kubelet, kubeadm and kubectl, and pin their version
          apt update && apt-get install -y kubelet kubectl kubeadm containerd.io && apt-mark hold kubelet kubeadm kubectl
          # containerd configure to default and cgroup managed by systemd
          containerd config default > /etc/containerd/config.toml
          sed -i 's/SystemdCgroup = false/SystemdCgroup = true/g' /etc/containerd/config.toml
          # avoid WARN&ERRO(default endpoints) when crictl run
          cat <<EOF > /etc/crictl.yaml
          runtime-endpoint: unix:///run/containerd/containerd.sock
          image-endpoint: unix:///run/containerd/containerd.sock
          EOF
          # ready to install for k8s
          systemctl restart containerd && systemctl enable containerd
          systemctl enable --now kubelet
          # Install packages
          apt install tree jq bridge-utils net-tools conntrack ipset wireguard -y
          # k8s Controlplane Join - API Server 192.168.10.10"
          kubeadm join --token 123456.1234567890123456 --discovery-token-unsafe-skip-ca-verification 192.168.10.10:6443

  EC23:
    Type: AWS::EC2::Instance
    DependsOn: EC21
    Properties:
      InstanceType: !Ref MyInstanceType
      ImageId: !Ref LatestAmiId
      KeyName: !Ref KeyName
      Tags:
        - Key: Name
          Value: k8s-w2
      NetworkInterfaces:
        - NetworkInterfaceId: !Ref EC23ENI1
          DeviceIndex: '0'
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeType: gp3
            VolumeSize: 30
            DeleteOnTermination: true
      UserData: !Base64
        Fn::Sub: |
          #!/bin/bash
          hostnamectl --static set-hostname k8s-w2
          # Config convenience
          echo 'alias vi=vim' >> /etc/profile
          ln -sf /usr/share/zoneinfo/Asia/Seoul /etc/localtime
          # Disable ufw & AppArmor
          systemctl stop ufw && systemctl disable ufw
          systemctl stop apparmor && systemctl disable apparmor
          #  ubuntu user -> root user
          echo "sudo su -" >> /home/ubuntu/.bashrc
          # Setting Local DNS Using Hosts file
          echo "192.168.10.10 k8s-m" >> /etc/hosts
          echo "192.168.10.101 k8s-w1" >> /etc/hosts
          echo "192.168.10.102 k8s-w2" >> /etc/hosts
          echo "192.168.20.100 k8s-w0" >> /etc/hosts
          # add kubernetes repo
          curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.30/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
          echo "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.30/deb/ /" | sudo tee /etc/apt/sources.list.d/kubernetes.list
          # add docker-ce repo with containerd
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
          # packets traversing the bridge are processed by iptables for filtering
          echo 1 > /proc/sys/net/ipv4/ip_forward
          # enable br_filter for iptables
          modprobe br_netfilter
          # Update the apt package index, install kubelet, kubeadm and kubectl, and pin their version
          apt update && apt-get install -y kubelet kubectl kubeadm containerd.io && apt-mark hold kubelet kubeadm kubectl
          # containerd configure to default and cgroup managed by systemd
          containerd config default > /etc/containerd/config.toml
          sed -i 's/SystemdCgroup = false/SystemdCgroup = true/g' /etc/containerd/config.toml
          # avoid WARN&ERRO(default endpoints) when crictl run
          cat <<EOF > /etc/crictl.yaml
          runtime-endpoint: unix:///run/containerd/containerd.sock
          image-endpoint: unix:///run/containerd/containerd.sock
          EOF
          # ready to install for k8s
          systemctl restart containerd && systemctl enable containerd
          systemctl enable --now kubelet
          # Install packages
          apt install tree jq bridge-utils net-tools conntrack ipset wireguard -y
          # k8s Controlplane Join - API Server 192.168.10.10"
          kubeadm join --token 123456.1234567890123456 --discovery-token-unsafe-skip-ca-verification 192.168.10.10:6443

  EC24:
    Type: AWS::EC2::Instance
    DependsOn: EC21
    Properties:
      InstanceType: !Ref MyInstanceType
      ImageId: !Ref LatestAmiId
      KeyName: !Ref KeyName
      Tags:
        - Key: Name
          Value: k8s-w0
      NetworkInterfaces:
        - NetworkInterfaceId: !Ref EC24ENI1
          DeviceIndex: '0'
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeType: gp3
            VolumeSize: 30
            DeleteOnTermination: true
      UserData: !Base64
        Fn::Sub: |
          #!/bin/bash
          hostnamectl --static set-hostname k8s-w0
          # Config convenience
          echo 'alias vi=vim' >> /etc/profile
          ln -sf /usr/share/zoneinfo/Asia/Seoul /etc/localtime
          # Disable ufw & AppArmor
          systemctl stop ufw && systemctl disable ufw
          systemctl stop apparmor && systemctl disable apparmor
          #  ubuntu user -> root user
          echo "sudo su -" >> /home/ubuntu/.bashrc
          # Setting Local DNS Using Hosts file
          echo "192.168.10.10 k8s-m" >> /etc/hosts
          echo "192.168.10.101 k8s-w1" >> /etc/hosts
          echo "192.168.10.102 k8s-w2" >> /etc/hosts
          echo "192.168.20.100 k8s-w0" >> /etc/hosts
          # add kubernetes repo
          curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.30/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
          echo "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.30/deb/ /" | sudo tee /etc/apt/sources.list.d/kubernetes.list
          # add docker-ce repo with containerd
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
          # packets traversing the bridge are processed by iptables for filtering
          echo 1 > /proc/sys/net/ipv4/ip_forward
          # enable br_filter for iptables
          modprobe br_netfilter
          # Update the apt package index, install kubelet, kubeadm and kubectl, and pin their version
          apt update && apt-get install -y kubelet kubectl kubeadm containerd.io && apt-mark hold kubelet kubeadm kubectl
          # containerd configure to default and cgroup managed by systemd
          containerd config default > /etc/containerd/config.toml
          sed -i 's/SystemdCgroup = false/SystemdCgroup = true/g' /etc/containerd/config.toml
          # avoid WARN&ERRO(default endpoints) when crictl run
          cat <<EOF > /etc/crictl.yaml
          runtime-endpoint: unix:///run/containerd/containerd.sock
          image-endpoint: unix:///run/containerd/containerd.sock
          EOF
          # ready to install for k8s
          systemctl restart containerd && systemctl enable containerd
          systemctl enable --now kubelet
          # Install packages
          apt install tree jq bridge-utils net-tools conntrack ipset wireguard -y
          # k8s Controlplane Join - API Server 192.168.10.10"
          kubeadm join --token 123456.1234567890123456 --discovery-token-unsafe-skip-ca-verification 192.168.10.10:6443

Outputs:
  Serverhost:
    Value: !GetAtt EC21.PublicIp